package org.example;

import org.example.dao.AccountDAO;
import org.example.dao.UserDAO;
import org.example.model.User;
import org.mindrot.jbcrypt.BCrypt;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class RegistrationScreen extends JFrame {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JPasswordField confirmPasswordField;
    private JTextField fullNameField;
    private JTextField emailField;
    private JButton registerButton;
    private JButton cancelButton;

    public RegistrationScreen() {
        setTitle("Online Banking System - Registration");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(null);

        // Username
        JLabel usernameLabel = new JLabel("Username:");
        usernameLabel.setBounds(30, 30, 100, 25);
        panel.add(usernameLabel);

        usernameField = new JTextField();
        usernameField.setBounds(150, 30, 200, 25);
        panel.add(usernameField);

        // Password
        JLabel passwordLabel = new JLabel("Password:");
        passwordLabel.setBounds(30, 70, 100, 25);
        panel.add(passwordLabel);

        passwordField = new JPasswordField();
        passwordField.setBounds(150, 70, 200, 25);
        panel.add(passwordField);

        // Confirm Password
        JLabel confirmPasswordLabel = new JLabel("Confirm Password:");
        confirmPasswordLabel.setBounds(30, 110, 120, 25);
        panel.add(confirmPasswordLabel);

        confirmPasswordField = new JPasswordField();
        confirmPasswordField.setBounds(150, 110, 200, 25);
        panel.add(confirmPasswordField);

        // Full Name
        JLabel fullNameLabel = new JLabel("Full Name:");
        fullNameLabel.setBounds(30, 150, 100, 25);
        panel.add(fullNameLabel);

        fullNameField = new JTextField();
        fullNameField.setBounds(150, 150, 200, 25);
        panel.add(fullNameField);

        // Email
        JLabel emailLabel = new JLabel("Email:");
        emailLabel.setBounds(30, 190, 100, 25);
        panel.add(emailLabel);

        emailField = new JTextField();
        emailField.setBounds(150, 190, 200, 25);
        panel.add(emailField);

        // Register Button
        registerButton = new JButton("Register");
        registerButton.setBounds(100, 230, 100, 25);
        panel.add(registerButton);

        // Cancel Button
        cancelButton = new JButton("Cancel");
        cancelButton.setBounds(220, 230, 100, 25);
        panel.add(cancelButton);

        // Action Listeners
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                registerUser();
            }
        });

        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new LoginScreen().setVisible(true);
                dispose(); // Close the registration screen
            }
        });

        add(panel);
        setVisible(true);
    }

    private void registerUser() {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());
        String confirmPassword = new String(confirmPasswordField.getPassword());
        String fullName = fullNameField.getText();
        String email = emailField.getText();

        // Validate input
        if (username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty() ||
                fullName.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Passwords do not match.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if username already exists
        UserDAO userDAO = new UserDAO();
        if (userDAO.getUserByUsername(username) != null) {
            JOptionPane.showMessageDialog(this, "Username already exists.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Hash the password
        String passwordHash = BCrypt.hashpw(password, BCrypt.gensalt());

        // Create a new user
        // Note: We're setting userId to 0 as it will be auto-generated by the database
        User newUser = new User(0, username, passwordHash, fullName, email);
        boolean isCreated = userDAO.createUser(newUser);

        if (isCreated) {
            // Ask if the user wants to create a bank account
            int option = JOptionPane.showConfirmDialog(this,
                    "Registration successful! Would you like to create a bank account?",
                    "Create Account",
                    JOptionPane.YES_NO_OPTION);

            if (option == JOptionPane.YES_OPTION) {
                createBankAccount(username);
            } else {
                JOptionPane.showMessageDialog(this, "You can create an account later.", "Registration Success", JOptionPane.INFORMATION_MESSAGE);
                new LoginScreen().setVisible(true);
                dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Registration failed. Please try again.", "Registration Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void createBankAccount(String username) {
        // Get the initial deposit amount
        String depositStr = JOptionPane.showInputDialog(this, "Enter initial deposit amount:");

        if (depositStr != null && !depositStr.isEmpty()) {
            try {
                double initialDeposit = Double.parseDouble(depositStr);

                if (initialDeposit < 0) {
                    JOptionPane.showMessageDialog(this, "Initial deposit cannot be negative.", "Invalid Amount", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Get the user ID
                UserDAO userDAO = new UserDAO();
                User user = userDAO.getUserByUsername(username);

                if (user != null) {
                    // Create the account
                    AccountDAO accountDAO = new AccountDAO();
                    boolean isCreated = accountDAO.createAccount(user.getUserId(), initialDeposit);

                    if (isCreated) {
                        JOptionPane.showMessageDialog(this,
                                "Bank account created successfully with an initial deposit of $" + initialDeposit,
                                "Account Created",
                                JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Failed to create bank account. Please contact support.",
                                "Account Creation Failed",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }

                // Redirect to login screen
                new LoginScreen().setVisible(true);
                dispose();

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Please enter a valid amount.", "Invalid Amount", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public static void main(String[] args) {
        new RegistrationScreen();
    }
}